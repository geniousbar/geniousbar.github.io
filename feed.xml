<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>日常学习</title>
  <id>http://geniousbar.github.io</id>
  <link href="http://geniousbar.github.io"/>
  <link href="http://geniousbar.github.io/feed.xml" rel="self"/>
  <updated>2017-08-02T08:00:00+08:00</updated>
  <author>
    <name>geniousbar</name>
  </author>
  <entry>
    <title>Rails Application Refactor</title>
    <link rel="alternate" href="http://geniousbar.github.io/2017/08/02/rails-application-refactor/"/>
    <id>http://geniousbar.github.io/2017/08/02/rails-application-refactor/</id>
    <published>2017-08-02T08:00:00+08:00</published>
    <updated>2017-08-02T17:23:27+08:00</updated>
    <summary type="html">&lt;h2 id="重构现有rails应用"&gt;重构现有Rails应用&lt;/h2&gt;

&lt;h3 id="面临问题"&gt;面临问题&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;数据库层面单独建立项目，导致产生更新流程， 更改interface, 然后重新启动， Rails应用（这里面存在问题，是不是可以使用listener， 设定脚本，更改 其他项目时候，主动重启Rails应用呢）, 也是流程问题， 两个项目interface, rails 分开发行，分支不同&lt;/li&gt;
  &lt;li&gt;项目趋于复杂， 不同模型，使用字段映射到相同的数据表，然而两个model却趋向于完全不同。导致使用统一model，的validation， callback...&lt;/li&gt;
&lt;/ul&gt;</summary>
    <content type="html">&lt;h2 id="重构现有rails应用"&gt;重构现有Rails应用&lt;/h2&gt;

&lt;h3 id="面临问题"&gt;面临问题&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;数据库层面单独建立项目，导致产生更新流程， 更改interface, 然后重新启动， Rails应用（这里面存在问题，是不是可以使用listener， 设定脚本，更改 其他项目时候，主动重启Rails应用呢）, 也是流程问题， 两个项目interface, rails 分开发行，分支不同&lt;/li&gt;
  &lt;li&gt;项目趋于复杂， 不同模型，使用字段映射到相同的数据表，然而两个model却趋向于完全不同。导致使用统一model，的validation， callback，变得复杂，混乱。页面中使用同一个controller，出现了各种判断流程。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="解决方法"&gt;解决方法&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;« Growing Rails Application in Practice » 中的方法是正确的，&lt;/li&gt;
  &lt;li&gt;本文实现了一个类似的 class&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CmsModel&lt;/span&gt;

    &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Model&lt;/span&gt;
    &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Callbacks&lt;/span&gt;

    &lt;span class="c1"&gt;# 如果更加简单的话，可以使用 method_missing 将全部的方法转发到 model中， 但是这样的话，存在如果保存失败的时候的情况，所以使用当前方法&lt;/span&gt;
    &lt;span class="no"&gt;DEFAULT_PRO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="ss"&gt;:model&lt;/span&gt;
        &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"@&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"@model"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"@model"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"@model"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="kp"&gt;nil&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"@model"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cms_attr_reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;DEFAULT_PRO&lt;/span&gt;
      &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;define_method&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
          &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# ActiveModel::Attributes 中的方法, 使model伪装成 active record&lt;/span&gt;
    &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="ss"&gt;:set&lt;/span&gt; &lt;span class="ss"&gt;:assign_attributes&lt;/span&gt;

    &lt;span class="c1"&gt;# 生命callback，统一使用一个save的interface来更新，创建 model， 使用if: :persisted?进行update， create的区分&lt;/span&gt;
    &lt;span class="n"&gt;define_model_callbacks&lt;/span&gt; &lt;span class="ss"&gt;:save&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;valid?&lt;/span&gt;
        &lt;span class="n"&gt;_run_save_callbacks&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# 供给页面调用，是否 持久化的判断&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;persisted?&lt;/span&gt;
      &lt;span class="vi"&gt;@model&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new?&lt;/span&gt;
      &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;persisted?&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# 减少delegate 的声明&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_missing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@model&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="vi"&gt;@model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="vi"&gt;@model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;


  &lt;span class="c1"&gt;# cms post model&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CmsPost&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;CmsModel&lt;/span&gt;

    &lt;span class="no"&gt;ATTRIBUTES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:userkey&lt;/span&gt; &lt;span class="ss"&gt;:tags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="no"&gt;NOT_PARAMS_COLUMN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;cms_attr_reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="no"&gt;ATTRIBUTES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;attr_writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="no"&gt;ATTRIBUTES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;before_save&lt;/span&gt; &lt;span class="ss"&gt;:create_model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;if: :new?&lt;/span&gt;
    &lt;span class="n"&gt;before_save&lt;/span&gt; &lt;span class="ss"&gt;:update_model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;unless: :new?&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;model_name&lt;/span&gt;
      &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Post"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;params&lt;/span&gt;
      &lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ATTRIBUTES&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="no"&gt;NOT_PARAMS_COLUMN&lt;/span&gt;
      &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;instance_variable_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"@&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to_h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;type_id: &lt;/span&gt;&lt;span class="no"&gt;FORUM_TYPE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:community&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;



  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="c1"&gt;# validator ------------------------------------&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;userkey_exist&lt;/span&gt;
      &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:userkey&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
        &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:userkey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"用户不存在"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# callback ------------------------------------&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_model&lt;/span&gt;
      &lt;span class="c1"&gt;# do something&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_model&lt;/span&gt;
      &lt;span class="c1"&gt;# do something&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;


  &lt;span class="c1"&gt;# controller&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
    &lt;span class="n"&gt;before_action&lt;/span&gt; &lt;span class="ss"&gt;:set_post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:destroy&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;
      &lt;span class="vi"&gt;@post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;CmsPost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;edit&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
      &lt;span class="vi"&gt;@post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;CmsPost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
          &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s1"&gt;'创建成功'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
          &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;
      &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
          &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s1"&gt;'Post was successfully updated.'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
          &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:edit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_post&lt;/span&gt;
      &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="vi"&gt;@post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;CmsPost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;model: &lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="总结"&gt;总结&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;大量的使用rails中自带的现有功能，validatoin, callback, attributes, naming&lt;/li&gt;
  &lt;li&gt;使用统一的save方法进行更新， 创建操作&lt;/li&gt;
  &lt;li&gt;使用@model区分更新或者创建, persisted?的返回值&lt;/li&gt;
  &lt;li&gt;使用 before callback 进行创建更新model， after callback进行关联model的区分&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Crafting rails</title>
    <link rel="alternate" href="http://geniousbar.github.io/2017/07/28/crafting-rails/"/>
    <id>http://geniousbar.github.io/2017/07/28/crafting-rails/</id>
    <published>2017-07-28T08:00:00+08:00</published>
    <updated>2017-08-02T16:47:56+08:00</updated>
    <summary type="html">&lt;h2 id="crafting-rails-application"&gt;Crafting rails application&lt;/h2&gt;

&lt;h3 id="创建自己的render"&gt;创建自己的render&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;rails plugins new pdf_render&lt;/li&gt;
  &lt;li&gt;gemspec, 之盾依赖， 作者、version， lib/pef_render.rb会被自动require（详细看bundler.io中的解释）&lt;/li&gt;
  &lt;li&gt;Gemfile, 直接引入gemspec，生命依赖关系&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;rails render 解析&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# rails/actionpac k/lib/action_controller/metal...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary>
    <content type="html">&lt;h2 id="crafting-rails-application"&gt;Crafting rails application&lt;/h2&gt;

&lt;h3 id="创建自己的render"&gt;创建自己的render&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;rails plugins new pdf_render&lt;/li&gt;
  &lt;li&gt;gemspec, 之盾依赖， 作者、version， lib/pef_render.rb会被自动require（详细看bundler.io中的解释）&lt;/li&gt;
  &lt;li&gt;Gemfile, 直接引入gemspec，生命依赖关系&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;rails render 解析&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# rails/actionpac k/lib/action_controller/metal/rendcers.rb&lt;/span&gt;

  &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="ss"&gt;:json&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;kind_of?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:callback&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;Mime&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;JS&lt;/span&gt;
      &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:callback&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;|||=&lt;/span&gt; &lt;span class="no"&gt;Mime&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;JSON&lt;/span&gt;
      &lt;span class="nb"&gt;self&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="vi"&gt;@post&lt;/span&gt;
  &lt;span class="n"&gt;json&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="vi"&gt;@post&lt;/span&gt;&lt;span class="c1"&gt;# json 指的是， block中的json的变量&lt;/span&gt;
  &lt;span class="c1"&gt;# 我们想提供的为&lt;/span&gt;
  &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;pdf: &lt;/span&gt;&lt;span class="s1"&gt;'contents'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;template: &lt;/span&gt;&lt;span class="s1"&gt;'path/to/template'&lt;/span&gt;

  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'prawn'&lt;/span&gt;  &lt;span class="c1"&gt;# prawn 提供 pdf的生成&lt;/span&gt;
  &lt;span class="n"&gt;pdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Prawn&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a string to pdf'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;render_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sample.pdf'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


  &lt;span class="c1"&gt;# lib/pdf_render.rb&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'prawn'&lt;/span&gt;
  &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Renderers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt; &lt;span class="ss"&gt;:pdf&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;pdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Prawn&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
    &lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;render_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;send_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;filename: &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.pdf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;diposition: &lt;/span&gt;&lt;span class="s2"&gt;"attachment"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# rails 如何设定正确的respon中的content type？&lt;/span&gt;
  &lt;span class="no"&gt;Mime&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register&lt;/span&gt; &lt;span class="s2"&gt;"application/pdf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:pdf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="sx"&gt;%w(pdf)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;rails render stack&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   AbstractController::Rendering.render
   |
   |-- _normalize_render
   |      |-- _normalize_args
   |      |-- _normalize_opions
   |-- ActionView::Rending.render_to_body
          |-- _proccess_options
          |-- _render_template
                  |-- context = view_context_class.new(view_renderer, view_assigns, self)
                  |-- ActionView::Renderer.new(lookup_context).render(context, option)
                      |-- Renderer.render_template(context, options)
                          |-- TemplateRenderer.new(@lookup_context).render(context, options)

  其中, 大部分的都是在ActionController::Base 中include进去的，所以。所有方法都是在controller中执行的
    def view_assigns
      protected_vars = _protected_ivars
      variables      = instance_variables

      variables.reject! { || sprotected_vars.include?  }
      svariables.each_with_object({}) { |name, hash|
        hash[name.slice(1, name.length)] = instance_variable_get(name)
      }
    end
    获取controller中所有的实例变量, 传递到 context中
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="通过active-model建立自己的模型"&gt;通过Active Model建立自己的模型&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;form_helper&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  form_for(record, options)
  |-- builder = instantiate_builder(object_name, record, options)
      |-- builder = options[:builder] || default_form_builder_class # ActionView::Helpers::FormBuilder
      |-- builder.new(object_name, object, self, options) # self is ActionView::Base instance
  |-- output = capture(builder, &amp;amp;block) # form_for中的内部dom
      |-- yield(builder)
        |-- Tags::TextField.new("data_bank", :title, self, {object: object}).render
          |-- options["value"] = options.fetch("value") { value_before_type_cast(object) }
            |-- value_before_type_cast # 从object获取method_name的数值
  |-- form_tag_with_body(html_options, output) # 构建真正的form dom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;所以rails中的文档有很明确的拓展方法:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyFormBuilder&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActionView&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Helpers&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FormBuilder&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;div_radio_button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
      &lt;span class="vi"&gt;@template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="vi"&gt;@template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;radio_button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="vi"&gt;@object_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;objectify_options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# The above code creates a new method +div_radio_button+ which wraps a div&lt;/span&gt;
  &lt;span class="c1"&gt;# around the new radio button. Note that when options are passed in, you&lt;/span&gt;
  &lt;span class="c1"&gt;# must call +objectify_options+ in order for the model object to get&lt;/span&gt;
  &lt;span class="c1"&gt;# correctly passed to the method. If +objectify_options+ is not called,&lt;/span&gt;
  &lt;span class="c1"&gt;# then the newly created helper will not be linked back to the model.&lt;/span&gt;
  &lt;span class="c1"&gt;#   &amp;lt;%= form_for @person, :builder =&amp;gt; MyFormBuilder do |f| %&amp;gt;&lt;/span&gt;
  &lt;span class="c1"&gt;#     I am a child: &amp;lt;%= f.div_radio_button(:admin, "child") %&amp;gt;&lt;/span&gt;
  &lt;span class="c1"&gt;#     I am an adult: &amp;lt;%= f.div_radio_button(:admin, "adult") %&amp;gt;&lt;/span&gt;
  &lt;span class="c1"&gt;#   &amp;lt;% end -%&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用继承类，定义自定义的方法， 其他的自然使用继承的方法调用&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;如何扩展 FormBuilder， 2： FormBuilder 在编辑时候的，默认值，是如何取到的&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id="server-异步消息到-client"&gt;Server 异步消息到 client&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;当样式表改动时候，rails发送data到浏览器，浏览器根据data 重新加载当前页面的样式表， 从而达到不需要重新刷新页面累加载样式的目的.&lt;/li&gt;
  &lt;li&gt;使用websocket(但是不知道为啥不能保持很长时间)， puma多线程, 自定义subscribe 使用queue作为数据结构， 体统轮训， 来分发到个个subscribe， 使用listener，监听个个文件的通知提供事件。&lt;/li&gt;
  &lt;li&gt;涉及到线程概念&lt;/li&gt;
  &lt;li&gt;代码加载， autoload是rails提供，而非ruby， ruby中的require是存在缺陷的，不是原子性的require， 在多线程加载中，存在问题， 可能存在A加载中class， B看到了class但是却是残缺不全的， 所以提供了eager load技术，加载所有的代码，而不需要动态加载代码。可以通过config.eager_load_namespaces 来配置，或者，使用代码 eager_autoload {autoload: SSESubscriber}， eager load受益的不仅仅是 puma这样的多线程，还有基于fork的unicorn，&lt;/li&gt;
  &lt;li&gt;listener， linux实现机制&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="responders"&gt;Responders&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用ActionController::Responder 最大的好处是 集中处理 每种请求的format&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;影响条件， type, http verb, resource status&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;rails 中responder 的实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# rails/actionpack/lib/action_controller/metal/responder.rb&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;respond&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;respond&lt;/span&gt;
    &lt;span class="nb"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"to_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;to_format&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_html&lt;/span&gt;
    &lt;span class="n"&gt;default_render&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;ActionView&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MissingTemplate&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="n"&gt;navigation_behavior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_js&lt;/span&gt;
    &lt;span class="n"&gt;default_render&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_format&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;get?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;has_errors?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;response_overridden?&lt;/span&gt;
      &lt;span class="n"&gt;default_render&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;display_errors&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;ActionView&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MissingTemplate&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="n"&gt;api_behavior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="no"&gt;DEFAULT_ACTIONS_FOR_VERBS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;post: :new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;patch: :edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;put: :edit&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;navigation_behavior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;get?&lt;/span&gt;
      &lt;span class="n"&gt;raise_error&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;has_errors?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;default_action&lt;/span&gt;
      &lt;span class="n"&gt;rende4r&lt;/span&gt; &lt;span class="ss"&gt;:action&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;default_action&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;navigation_location&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;api_behavior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;resourceful?&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;get?&lt;/span&gt;
      &lt;span class="nb"&gt;display&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;post?&lt;/span&gt;
      &lt;span class="nb"&gt;display&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:status&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:created&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:location&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;api_location&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="ss"&gt;:no_content&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resourceful?&lt;/span&gt;
    &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"to_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_errors?&lt;/span&gt;
    &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;empty?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resource_location&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:location&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;given_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;render&lt;/span&gt; &lt;span class="n"&gt;given_options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;merge!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;merge!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# 配置方式&lt;/span&gt;
  &lt;span class="no"&gt;ApplicationController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;responder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyAppResponder&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;responder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyAppResponder&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;如果想特殊化一个format的展现， 可以像respond_to 一样使用block&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
    &lt;span class="vi"&gt;@users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;
    &lt;span class="n"&gt;respond_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="vi"&gt;@users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;some_specific_option: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;最后章节， 关于generator的自定义，类似于rails guides，可以作为参考&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id="notification-api"&gt;Notification API&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. instrument(), subscribe(),
  ```ruby
    ActiveSupport::Notification.instrument(event_name,
    payload: {format: :html, name: 'xxx'}) do
      process_action("index")
    end
    ActiveSupport::Notification.subscribe(event_name) do |*args|
      args
    end

    args: {
      name: 事件名字,
      started_at: 事件开始时间,
      ended_at: 事件完结时间,
      instrument_id: 事件唯一id,
      payload: 事件携带的信息,
    }
  ```
2. Rails and rack
  &amp;gt; 任何一个响应call方法的ruby对象都是Rack应用，接受一个参数， environment， 然后返回 status, headers, body

  ```ruby
  class HelloRack
    def call(env)
      [200, {'Content-Type' =&amp;gt; 'text/html'}, ['Hello Rack!']]
    end
  end
  run HelloRack.new
  ```
3. Rails Router
  Rails自动将 Controller#action 转换成Rack application， 可以这样， PostsController.action(:index).responds_to?(:call)
4. middleware stacks
  * 除了在 config 中配置middleware外，还可以在Conttoller中配置使用， class Userscontroller use MyMiddleware end;
  * Request ---&amp;gt; Web server -&amp;gt; middleware -&amp;gt; Rails Appplication -&amp;gt; middleware -&amp;gt; Router -&amp;gt; Controller -&amp;gt; middleware -&amp;gt; Action
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="i18n-没看"&gt;I18n （没看）&lt;/h3&gt;

&lt;h3 id="总结"&gt;总结&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;创建自己的render： 创建自己的pdf handler&lt;/li&gt;
  &lt;li&gt;自定义自己的ActionModel： 讲的有点鸡肋， 没有进行深入的剖析, 譬如Active::Model中的callback实现， 自定义model的原因， 目的。FormBuilder的自定义也没有涉及到&lt;/li&gt;
  &lt;li&gt;websocket： 似乎并不是一个完整的实现， 还存在缺陷&lt;/li&gt;
  &lt;li&gt;Responders: 并不是解耦的很好方法，实际情况中，似乎并不需要&lt;/li&gt;
  &lt;li&gt;Notification: 主要讲的并不是Notification的实现机制，实现方法，主要讲的是Rails Engin， middleware&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;书中讲解的并不算太多，大部分都是在Rails Engin 中进行， 进行了一个markdown的view handler 值得注意看，之外， 其他的都没有进行深入的讲解，譬如， 自定义ActiveModel 的作用，目的，实现方法， FormBuilder又是如何, Reponder 感觉并没有太多的进行简化，&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>thor option parse 的代替者</title>
    <link rel="alternate" href="http://geniousbar.github.io/2017/07/21/ruby-gem-thor/"/>
    <id>http://geniousbar.github.io/2017/07/21/ruby-gem-thor/</id>
    <published>2017-07-21T08:00:00+08:00</published>
    <updated>2017-07-28T21:01:05+08:00</updated>
    <summary type="html">&lt;h2 id="thor"&gt;thor&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;option parse 的代替者，可以在shell中调用脚本，更方便的传递参数，转换参数类型，　设定默认值，进行必要参数校验等.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="简单的示例"&gt;简单的示例：&lt;/h3&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Thor&lt;/span&gt;
  &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"example FILE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"an example task"&lt;/span&gt;
  &lt;span class="n"&gt;method_option&lt;/span&gt; &lt;span class="ss"&gt;:delete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:aliases&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"-d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:desc&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Delete the file after parsing it"&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary>
    <content type="html">&lt;h2 id="thor"&gt;thor&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;option parse 的代替者，可以在shell中调用脚本，更方便的传递参数，转换参数类型，　设定默认值，进行必要参数校验等.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="简单的示例"&gt;简单的示例：&lt;/h3&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Thor&lt;/span&gt;
  &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"example FILE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"an example task"&lt;/span&gt;
  &lt;span class="n"&gt;method_option&lt;/span&gt; &lt;span class="ss"&gt;:delete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:aliases&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"-d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:desc&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Delete the file after parsing it"&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"You supplied the file: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="n"&gt;delete_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:delete&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;delete_file&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"You specified that you would like to delete &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"You do not want to delete &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;thor&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="ss"&gt;:example&lt;/span&gt; &lt;span class="s1"&gt;'test.rb'&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="method_options"&gt;method_options&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aliases, type, desc, 描述参数的类型，简写形式
method_options :value, aliases: 'v', default: 1, type: :numeric
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="invocations"&gt;invocations&lt;/h4&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```ruby class Counter &amp;lt; Thor   desc "one", "Prints 1 2 3"   def one
puts 1
invoke :two
invoke :three   end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;desc “two”, “Prints 2 3”&lt;br /&gt;
  def two&lt;br /&gt;
    puts 2&lt;br /&gt;
    invoke :three&lt;br /&gt;
  end&lt;/p&gt;

&lt;p&gt;desc “three”, “Prints 3”&lt;br /&gt;
  def three&lt;br /&gt;
    puts 3&lt;br /&gt;
  end&lt;br /&gt;
end&lt;br /&gt;
    ```&lt;/p&gt;
&lt;h4 id="executable"&gt;Executable&lt;/h4&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"rubygems"&lt;/span&gt; &lt;span class="c1"&gt;# ruby1.9 doesn't "require" it though&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"thor"&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyThorCommand&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Thor&lt;/span&gt;
  &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Prints foo"&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;MyThorCommand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;最终要的是rails 中的generator使用thor创建，拷贝模板，　参数解析等&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>七周七数据库</title>
    <link rel="alternate" href="http://geniousbar.github.io/2017/06/29/databases/"/>
    <id>http://geniousbar.github.io/2017/06/29/databases/</id>
    <published>2017-06-29T08:00:00+08:00</published>
    <updated>2017-07-28T21:01:20+08:00</updated>
    <summary type="html">&lt;h2 id="七周七数据库"&gt;七周七数据库&lt;/h2&gt;
&lt;p&gt;&lt;a href="#postgres"&gt;Postgres&lt;/a&gt;&lt;br&gt;
&lt;a href="#riak"&gt;Riak&lt;/a&gt;&lt;br&gt;
&lt;a href="#hbase"&gt;Rbase&lt;/a&gt;&lt;br&gt;
&lt;a href="#mongodb"&gt;MongoDB&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="概述"&gt;概述&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;选取那种数据库能够最好的解决你的问题&lt;/li&gt;
  &lt;li&gt;数据库类型：关系型(Postgres)、键值类型(Riak, Redis)、多列型(Hbase)、面向文档型(MongoDb, CouchDb)、图型(Neo4j)&lt;/li&gt;
  &lt;li&gt;模式是数据库所强制的一个刚性框架&lt;/li&gt;
  &lt;li&gt;实现横向扩展（MongoDB， Hbase、Riak）， 纵向扩展（Postgres、Neo4j、Redis）&lt;/li&gt;
  &lt;li&gt;关系型数据库： Mysql, H2, HSQLDB...&lt;/li&gt;
&lt;/ul&gt;</summary>
    <content type="html">&lt;h2 id="七周七数据库"&gt;七周七数据库&lt;/h2&gt;
&lt;p&gt;&lt;a href="#postgres"&gt;Postgres&lt;/a&gt;&lt;br /&gt;
&lt;a href="#riak"&gt;Riak&lt;/a&gt;&lt;br /&gt;
&lt;a href="#hbase"&gt;Rbase&lt;/a&gt;&lt;br /&gt;
&lt;a href="#mongodb"&gt;MongoDB&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="概述"&gt;概述&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;选取那种数据库能够最好的解决你的问题&lt;/li&gt;
  &lt;li&gt;数据库类型：关系型(Postgres)、键值类型(Riak, Redis)、多列型(Hbase)、面向文档型(MongoDb, CouchDb)、图型(Neo4j)&lt;/li&gt;
  &lt;li&gt;模式是数据库所强制的一个刚性框架&lt;/li&gt;
  &lt;li&gt;实现横向扩展（MongoDB， Hbase、Riak）， 纵向扩展（Postgres、Neo4j、Redis）&lt;/li&gt;
  &lt;li&gt;关系型数据库： Mysql, H2, HSQLDB,SQLite,&lt;/li&gt;
  &lt;li&gt;键值数据库， KV， 因为对资源的要求非常少，所以会有着高性能， 但是当你有复杂的查询和聚合的需求时候，不会有帮助&lt;/li&gt;
  &lt;li&gt;列型数据库：大约介于关系数据库-键值数据库之间HBase&lt;/li&gt;
  &lt;li&gt;文档型数据库：存储的就是文档， 有一个独一无二的IB标识&lt;/li&gt;
  &lt;li&gt;图数据库：在数据中建立联系， 如社交网络&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="postgres"&gt;postgres&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;庞大的特性集合（触发器、存储过程、高级索引、数据安全性）， 查询灵活，模式是规范的。&lt;/li&gt;
  &lt;li&gt;事务保证一致性， 索引，连接查询。&lt;/li&gt;
  &lt;li&gt;存储过程， 可以减少客户端代码的编写，提高性能，但是， 却决定与数据库的绑定，&lt;/li&gt;
  &lt;li&gt;视图，create View&lt;/li&gt;
  &lt;li&gt;全文索引 TSVector TSQuery， Lucence, Sphinx， 搜索引擎&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;优点:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;符合ACID，确保提交的院子型，一致性， 隔离和持久, 数据模式非常规范，通过优化（建立索引等）可以轻松处理TB的数据&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;缺点:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;分区不是强项，数据要求比较严格，如果数据过于灵活，不是很容易融入到关系数据库严格的数据模式中，或者不需要一个完整的数据库功能带来的开销，需要进厂非常大量的键值对读写的操作&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="riak"&gt;riak&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;分布式的键值数据库，值可以是任何类型的数据， 普通文本，json，xml，图片，音频等。对互联网友好，可以通过URL，http方式查询&lt;/li&gt;
  &lt;li&gt;容错： 服务器可以在任何时刻启动或者停止，而不会引起任何单点故障，（非常注重可以写入性。。。为的是可以回家睡觉）&lt;/li&gt;
  &lt;li&gt;缺点：对于自定义的查询缺乏支持， 键值的存储设计，是数据值无法进行连接（外键）&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id="riak-中的架构设计"&gt;Riak 中的架构设计&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;环状：个个节点加入到一个环， 每个Vnode代表一系列经过hash的键，这个可以通过计算hash可快速寻找键值&lt;/li&gt;
  &lt;li&gt;Riak中写入对象时候，可以选择在多个节点上创建这个值的副本，如果某个节点发生故障，还有另一个节点的副本可以使用.三个数值， N， W， R， ：n第一次写入最终复制的节点数量， 集群中的副本数量，W， 第一次成功写入返回前，必须成功写入的节点数，R是成功读取一项数据所必须的节点数，&lt;/li&gt;
  &lt;li&gt;向量时钟， 解决冲突：&lt;/li&gt;
  &lt;li&gt;可以使用Erlang， Javascript，写函数，提交前后的回调函数&lt;/li&gt;
  &lt;li&gt;搜索： 如果你打算为大规模web应用提供搜索功能， Riak是一个明确的选择。 但是你需要大量简答的自有定义的查询，则不是明智的&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;优点:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;致力于最高可用性， 避免单点故障，如果使用Erlang就能够扩展Riak的核心，map reduce&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;缺点:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;没有严格的数据结构，数据模式， 自定义查询很弱。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="hbase"&gt;hbase&lt;/h3&gt;

&lt;p&gt;优点：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;值得注意的特性：健壮的可伸缩架构， 内置的版本，压缩功能。 保存wiki页面，自动实现了版本管理&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;缺点：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;5个节点是最小的配置， 学习曲线陡峭，除了行键之外，不提供任何索引功能，不提供排序， 所以如果不能使用行键查找，就只能使用扫描表，或者自己维护索引， 数据类型的缺失： 所有字段的数值都作为不解释的字节数组， 比如整数值、字符串、日期之类的，对这些的解释取决玉应用程序。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="mongodb"&gt;mongodb&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;文档数据库，允许数据以嵌套形式的状态保存， 没有模式，&lt;/li&gt;
  &lt;li&gt;关系数据库有强大的查询能力， Riak， Hbase分布式存储的特点，Mongo在这俩昂着之前找到了最佳结合点， 保存大规模数据， 又能满足自有定义的查询。 是一个json�文档数据库，能够无限的嵌套。&lt;/li&gt;
  &lt;li&gt;安装一般需要先创建数据存储位置， /data/db, mongod&lt;/li&gt;
  &lt;li&gt;Mongo不支持join操作&lt;/li&gt;
  &lt;li&gt;db.users.find(function(){ return this.age &amp;gt; 50 &amp;amp;&amp;amp; this.age &amp;lt; 100})使用函数作为find参数的，最后在考虑，因为查询很慢，不能使用索引。&lt;/li&gt;
  &lt;li&gt;Map Reduce, db.runCommand({mapReduce: ‘tables’, map: map_fun, reduce: reduce_fun, out: ‘result_tables’})&lt;/li&gt;
  &lt;li&gt;副本集合， 分片，地理空间， GridFS，&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;优点：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;能够通过复制和横向伸缩， 处理大量的数据，+ 非常灵活的数据模型，强大的SQL&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;缺点：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;鼓励反规范化的模式， 将任意类型的数据插入集合中，是很危险的。需要努力去设计和管理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="redis"&gt;redis&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. redis-server, redis-cli
2. redis 数据类型，Lists, Sets, Sorted sets, Hashes, Bit arrays, HyperLogLogs
3. redis keys 
   * 空值可以是key
   * 太长太浪费空间，　太短容易造成冲突
   * 坚持使用一种模式
4. 命令集合: 
   * set, get, incr, decr, mset, exists, type, expire, ttl
   * list rpush, lpush, lrange, rpop, del, llen, lpop, 
   * hash, hmset, hget, hgetall, 
   * sets, sadd, smembers, sismember, sinter, sunionstore, spop, scard, 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>高性能Mysql</title>
    <link rel="alternate" href="http://geniousbar.github.io/2017/06/26/mysql/"/>
    <id>http://geniousbar.github.io/2017/06/26/mysql/</id>
    <published>2017-06-26T08:00:00+08:00</published>
    <updated>2017-06-28T18:07:21+08:00</updated>
    <summary type="html">&lt;h2 id="mysql-性能优化"&gt;Mysql 性能优化&lt;/h2&gt;

&lt;h3 id="mysql-架构"&gt;mysql 架构&lt;/h3&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  客户端 ---&amp;gt; 连接/线程处理 ----&amp;gt; 查询缓存
                |               ^
                |               |
                |               |
                |------------&amp;gt; 解析器 ---------&amp;gt; 优化器 ------&amp;gt; 存储引擎
                ( 第一层)      (第...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary>
    <content type="html">&lt;h2 id="mysql-性能优化"&gt;Mysql 性能优化&lt;/h2&gt;

&lt;h3 id="mysql-架构"&gt;mysql 架构&lt;/h3&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  客户端 ---&amp;gt; 连接/线程处理 ----&amp;gt; 查询缓存
                |               ^
                |               |
                |               |
                |------------&amp;gt; 解析器 ---------&amp;gt; 优化器 ------&amp;gt; 存储引擎
                ( 第一层)      (第二层)          (     第三层          )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;使用用户名，密码，安全套接字ssl，方式连接&lt;/li&gt;
  &lt;li&gt;优化执行： 优化器，会解析查询。包括，创建内部解析树，决定表的查询顺序，选择合适的索引等，explaiin，优化器并不关心表的存储引擎，而是隔离！，但是存储引擎对于查询优化是有影响的。优化器会请求存储引擎提供容量、操作的开销信息等，进行优化.&lt;/li&gt;
  &lt;li&gt;并发控制， 读写锁（共享锁、排它锁），锁的粒度（表锁、行级锁、）, 事务： 原子性、一致性、哥理性、持久性，事务日志，通过日志恢复错误的崩溃. 在innoDb中显示的使用所，没有必要，还会严重影响性能。&lt;/li&gt;
  &lt;li&gt;存储引擎： Engine: InnoDB, MyISAM(不支持事务、行级锁) 、Archive, Blackhole, CSV, Memory&lt;/li&gt;
  &lt;li&gt;引擎选择： 除非需要用到某些InnoDB不具备的特性，并且没有其他办法可以代替，否则都应该优先选择InnoDB引擎，例如使用全文索引，有限使用InnoDB+Sphinx，而不是支持全文所以的MyISAM, 考虑因素： 事务、备份、崩溃恢复&lt;/li&gt;
  &lt;li&gt;大数据量： InnoDB 数据量在 3-5TB，10TB以上，需要建立数据仓库， Infobright是比较成功的mysql数据仓库反感， TokuDB也可以&lt;/li&gt;
  &lt;li&gt;存储引擎的转换： alter table, 导出导入， 创建与查询， create table innodb_table like myisam_table; alter table innodb_table ENGINE=InnoDB; insert into innodb_table select * from myisam_table&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="基准测试"&gt;基准测试&lt;/h3&gt;
&lt;p&gt;todo&lt;/p&gt;

&lt;h3 id="服务器性能剖析"&gt;服务器性能剖析&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;通常为三个问题： 确认服务器是否达到了性能最佳的状态、找出某条语句为什么执行不够快、诊断造成用户卡顿的某些间歇性 性能故障&lt;/li&gt;
  &lt;li&gt;性能剖析， 测量服务器的时间花费在那里&lt;/li&gt;
  &lt;li&gt;性能定义为： 完成某件任务所需要的时间而不是资源来测量性能。数据库服务器的目的是执行sql，所以关注的任务是查询或者语句。一个陷阱是：资源是用来消耗并且用来工作的。所以有时候消耗更多的资源能够加快查询速度，查询的响应速度更能够提现升级后的性能是不是更好。&lt;/li&gt;
  &lt;li&gt;所以如果目标是降低响应时间，那么就需要先搞清楚时间话费在哪里，无法测量就无法有效的优化，所以第一步是： 测量时间花费在什么地方。&lt;/li&gt;
  &lt;li&gt;完成任务所需要的时间： 执行时间+等待时间。 而等待时间则的测量比较复杂，可能由其他系统间接导致。基于执行时间的分析研究的是什么任务的执行时间最长，等待的分析：判断任务在什么地方被阻塞的时间最长.&lt;/li&gt;
  &lt;li&gt;性能剖析： 1： 测量任务所花费的时间， 2：统计排序， 性能剖析报告会列出所有的任务列表，列出，任务名、任务的执行时间，任务的消耗时间，占比等。&lt;/li&gt;
  &lt;li&gt;show status, 大部分结果只是一个计数器， FLUSH STATUS; select * from users; SHOW STATUS WHERE Variable_name LIKE ‘Handler%’ OR Variable_name LIKE ‘Create%’&lt;/li&gt;
  &lt;li&gt;慢查询日志:&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="schema-与数据类型优化"&gt;Schema 与数据类型优化&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;schema 原则： 1： 更小的通常更好（更小的通常意味着占用更小的磁盘、内存）， 2：简单就好, 简单的数据类型耗费更少的CPU周期，（应该是用mysql内奸的数据类型而不是字符串保存日期和时间， 另一个则是使用整行，保存ip）, 3:  避免NULL，通常最好指定列为NOT NULL，查询中包含null对于mysql来说更难优化，尽量不要在NUll的列上建立索引。&lt;/li&gt;
  &lt;li&gt;varchar（变长） char (固定长度), 最好的策略是，只分配真正需要的空间&lt;/li&gt;
  &lt;li&gt;使用枚举代替 字符串类型，枚举类型的数据结构非常紧凑，可以节省大量的空间。&lt;br /&gt;
    * 缺点: 不能够随意改变，对于未来会改变的字符串，不太适合。不建议选用。&lt;br /&gt;
    * 排序可以使用FIELD函数进行。&lt;/li&gt;
  &lt;li&gt;日期和时间类型： DATETIME， 与时区无关，使用8个字节的存储空间。 TIMESTAMP： 格林尼治标准时间， 处理时区，使用4个字节。默认not NULL&lt;/li&gt;
  &lt;li&gt;选择标志符, 标识符可能与其他值进行比较，例如关联操作，标识列可能在另在的表中作为外键使用。所以为标识列选择数据类型时，应该选择跟关联表中对应的列一样的类型。所以不进需要卡绿存储类型，还需要考虑mysql对这种类型怎样执行计算和比较。在可满足的范围的需求，并且预留未来增长空间的前提下，应该选用最小的数据类型，&lt;br /&gt;
    * 整数类型： 通常是最好的选择&lt;br /&gt;
    * 字符串类型： 如果可能，应该避免使用字符串作为标识列，1，消耗空间，比数字类型慢，2.对于md5， sha1,uuid类型产生的字符串，会导致insert以及select语句变得慢。因为插入值会随机的写入到索引的不同位置，所以insert慢，select慢，是因为逻辑上相邻的行，会分不在磁盘、内存的不同地方，随机值导致缓存的效果也会很差，因为会导致缓存赖以工作的局部性原理失效。UUID，应该移除「-」符号, 对比sha1，虽然分布也不均匀，但是还有有一定顺序。&lt;br /&gt;
    * 所以按照这样的说法，一些，需要处理id的地方，比如用户的主键，直接使用integer，可以另外设定一个字段展示。&lt;br /&gt;
    * 特殊数据类型： IP v4地址， 人们经常石永红varchar(15)来保存，然而它是32位无符号正数，不是字符串， INET_ATON, INET_NTOA&lt;br /&gt;
    * 为了提升读查询的速度，需要建立一些额外的索引，增加冗余列，增加了写的负担，需要额外的维护任务，但是读操作提醒了。这是常见的技巧&lt;/li&gt;
  &lt;li&gt;alert table 执行大部分修改表结构的惭怍方法是： 使用新的数据结构创建一个空表，从旧的表中查询所有数据插入到新表，然后删除旧表。这样的操作可能需要花费很长时间，如果内存不足而且表又很大，很多索引的情况下尤其如此。&lt;br /&gt;
    * 下面的一些操作，是可能不需要重建表的， 而是直接修改.frm文件&lt;br /&gt;
    * 移除 一个列的 auto_increment操作&lt;br /&gt;
    * 增加、移除、或者更改 ENUM， SET敞亮，&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="创建高性能的索引"&gt;创建高性能的索引&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;索引对于良好的性能非常关键，尤其是当表中的数据量越来越大时。索引优化应该是针对查询性能优化最有效的手段了，索引能够情谊的讲查询性能提高到几个数量级。&lt;/li&gt;
  &lt;li&gt;索引类型：索引是在存储引擎而不是在服务层实现的，所以并没有统一的索引标准，&lt;br /&gt;
    * B-Tree, 人们多半讨论的是B-Tree索引，但是存储引擎依然使用的是不同的结构， InnoDB使用的为B+Tree， B-Tree对索引列是顺序组织的，适合范围查找，限制： 如果不是按照所以的声明顺序的最左列开始查找，则无法使用索引，不能跳过中间索引，所以：可能需要使用相同的列，但是不同顺序的索引满足查询要求。&lt;br /&gt;
    * 哈希索引： 将所有索引生成哈希码&lt;/li&gt;
  &lt;li&gt;索引的优点：&lt;br /&gt;
    * 大大减少了服务器需要扫描的数据量&lt;br /&gt;
    * 可以帮助服务器避免排序和临时表&lt;br /&gt;
    * 可以将随机io变味顺序io&lt;/li&gt;
  &lt;li&gt;高性能索引策略, 正确的创建和使用索引是实现高性能查询的基础。&lt;/li&gt;
  &lt;li&gt;索引策略：&lt;br /&gt;
    * 前缀索引和索引选择性， varchar类型的列，需要使用前缀索引，&lt;br /&gt;
    * 把where条件中的列都加上索引是错误的！。&lt;br /&gt;
    * 多个列独立的建立索引大部分情况下都不能提高查询性能。&lt;br /&gt;
    * 选择合适的索引顺序。 B-Tree中索引的顺序意味着所以首先按照最左列进行排序， 其次是第二列，将选择最高的列，放在索引前面。&lt;br /&gt;
    * 聚簇索引：主键中为B-Tree， 其他索引中，为B-tree，但是叶子节点中存储的为主键， 通过主键在次查询到具体数据.&lt;br /&gt;
    * 在InnoDB中按照主键顺序的插入行，最好避免随机，会带来没必要的分页存储。大量的数据插入可能会导致AUTO_INCREMENT锁竞争，可以秀发Innodb_autoin_lock_mode中的配置。&lt;br /&gt;
    * 使用索引扫描来做排序， 通过排序操作，活着按照索引顺序排序, explain出来 type为index， 则说明使用了索引排序&lt;br /&gt;
    * 删除冗余和重复索引&lt;br /&gt;
    * 删除未使用的索引&lt;br /&gt;
    * 索引会有效的减少需要lock的数据，&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="查询性能优化"&gt;查询性能优化&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;大部分性能底下的查询都可以通过减少访问的数据量的方式进行&lt;/li&gt;
  &lt;li&gt;是否扫描额外的数据：1：响应时间， 2： 扫描的行数， 3：返回的行数&lt;/li&gt;
  &lt;li&gt;explain 类型，有： 全表扫描， 碎银扫描， 范围扫描， 唯一索引查询，常熟引用&lt;/li&gt;
  &lt;li&gt;发现扫描大量数据但是返回很少的行的情况的优化方法：&lt;br /&gt;
    * 使用索引， 将需要的列，放入到索引中&lt;br /&gt;
    * 改变库表的结构，例如使用单独的汇总表&lt;/li&gt;
  &lt;li&gt;重构查询：&lt;br /&gt;
    *  切分查询，例如，删除数据，分散的删除数据， 而不是一次性删除&lt;br /&gt;
    * 分解关联查询： 简单的， 可以对没一个表进行查询，然后将结果在应用程序中，进行关联， 几个有点： 1：缓存的效果v更高， 2：查询分解后，减少锁的竞争。 3：查询效率提升（单个查询）， 4： 减少冗余记录的查询&lt;/li&gt;
  &lt;li&gt;查询执行基础：&lt;br /&gt;
    * 客户端、服务器通信协议，任何时刻都只有一个人在掌控球。一旦客户端发送了请求，能做的事情，就只有等待结果。&lt;br /&gt;
    * mysql的连接（线程）的状态有： sleep, query, locked, analyzing and statistics, cpoying to tmp table, sorting result, sending data&lt;br /&gt;
    *  排序优化：加索引&lt;br /&gt;
    * 在同一个表上查询和更新： 借助临时表&lt;br /&gt;
    * 关联查询： 确保On 中的列上有索引， 只需要在关联顺序中的第二个表的对应列上创建索引&lt;br /&gt;
    * 优化limit：一般会加上合适的order by语句， 如果有索引，效率会非常不错。 2： 大偏移量问题： 限制&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>Principles of economics</title>
    <link rel="alternate" href="http://geniousbar.github.io/2017/06/25/economy-learn/"/>
    <id>http://geniousbar.github.io/2017/06/25/economy-learn/</id>
    <published>2017-06-25T08:00:00+08:00</published>
    <updated>2017-06-26T17:15:50+08:00</updated>
    <summary type="html">&lt;h2 id="经济学原理微观经济学"&gt;经济学原理(微观经济学)&lt;/h2&gt;

&lt;h3 id="经济学十大原理"&gt;经济学十大原理&lt;/h3&gt;
&lt;hr&gt;
&lt;ul&gt;
  &lt;li&gt;人们面临权衡取舍&lt;br&gt;
社会面临着在　效率公平 之间的权衡取舍&lt;/li&gt;
  &lt;li&gt;机会成本(某种东西的成本是为了得到他所放弃的东西), 比如时间，资源&lt;/li&gt;
  &lt;li&gt;理性人考虑边际效应&lt;/li&gt;
  &lt;li&gt;人们会对激励作出反应&lt;br&gt;
整个经济学的内容可以简单的概括为: “人们会对激励作出反应，其余内容则是对内容的解释”&lt;/li&gt;
  &lt;li&gt;贸易可以是每个人的状态都变得更好&lt;/li&gt;
  &lt;li&gt;市场通常是组织经济活动的一种好方法&lt;/li&gt;
  &lt;li&gt;政府有时可以改善市场结果&lt;br&gt;
政府干预经济１：促进效率或者公平，　２：市场失灵，　３：设计良好...&lt;/li&gt;
&lt;/ul&gt;</summary>
    <content type="html">&lt;h2 id="经济学原理微观经济学"&gt;经济学原理(微观经济学)&lt;/h2&gt;

&lt;h3 id="经济学十大原理"&gt;经济学十大原理&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;人们面临权衡取舍&lt;br /&gt;
社会面临着在　效率公平 之间的权衡取舍&lt;/li&gt;
  &lt;li&gt;机会成本(某种东西的成本是为了得到他所放弃的东西), 比如时间，资源&lt;/li&gt;
  &lt;li&gt;理性人考虑边际效应&lt;/li&gt;
  &lt;li&gt;人们会对激励作出反应&lt;br /&gt;
整个经济学的内容可以简单的概括为: “人们会对激励作出反应，其余内容则是对内容的解释”&lt;/li&gt;
  &lt;li&gt;贸易可以是每个人的状态都变得更好&lt;/li&gt;
  &lt;li&gt;市场通常是组织经济活动的一种好方法&lt;/li&gt;
  &lt;li&gt;政府有时可以改善市场结果&lt;br /&gt;
政府干预经济１：促进效率或者公平，　２：市场失灵，　３：设计良好的公共政策促进经经济效率&lt;/li&gt;
  &lt;li&gt;一国的生活水平取决与它生产物品与服务的能力&lt;/li&gt;
  &lt;li&gt;社会面临着通货膨胀与失业之间的短期权衡取舍
    &lt;blockquote&gt;

      &lt;p&gt;政府发行了过多的货币时候，物价上升&lt;br /&gt;
  经济中的货币量增加刺激了社会的整体指出水平，从而增加了对物品与服务的需求&lt;br /&gt;
  需求的增加随着时间的退役，会引起企业提高物价，但同时，它也激励着企业雇佣更多的工人，并生产更多的物品与服务&lt;br /&gt;
  雇佣工人意味着更少的失业&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="微观经济学"&gt;微观经济学&lt;/h4&gt;
&lt;p&gt;微观经济学与宏观经济学是密切相关的：由于整体经济的变动是千百万个人的决策，所以不考虑相关的微观经济学而去理解宏观经济学的发展是不可能的。但是，确实是两个不同的领域，每个领域都有自己的独特分析方法与模型。&lt;/p&gt;

&lt;h4 id="经济学家意见分歧的原因"&gt;经济学家意见分歧的原因:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;经济学家可能对世界如何运行的不同实证理论的正确性看法不一致&lt;/li&gt;
  &lt;li&gt;经济学家可能有不同的价值观，因此对政策所努力实现的目标有不同的观点&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="图形分析工具存在的问题"&gt;图形分析工具存在的问题:&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;在研究两个变量之间的关系时，要保持其他条件不变是很困难的，可能存在忽略的重要的变量&lt;/li&gt;
  &lt;li&gt;反向因果关系（假设的影响关系方向可能不正确）变量先动是确定因果关系的简单方法，但是存在一个缺陷，人们对未来的预期改变自己的行为，而不是现状。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id="相互依存与贸易的好处"&gt;相互依存与贸易的好处&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;当每个人有各自的优势时候，能够以更加低廉的成本生产产品的时候，双方合作更加具有优势，扩大了生产边界&lt;/li&gt;
  &lt;li&gt;当一方存在全部的绝对优势的时候，就是说，一方在生产各个产品的时候都更具有效率，双方合作仍然能够扩大生产边界，可以用 &lt;strong&gt;比较优势&lt;/strong&gt; 来解释&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;对比较优势的解释示例:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rose 生产１单位牛肉需要２０分钟，生产１单位土豆需要１０分钟&lt;br /&gt;
  Frank生产１单位牛肉需要６０分钟，生产１单位土豆需要１５分钟。&lt;br /&gt;
  比较来看Rose的生产效率更高，在各个产品的生产上具有绝对优势。&lt;br /&gt;
  但是：机会成本是不同的，考虑Rose花费１０分钟生产１单位土豆时候，可以用１０分钟生产1/2单位牛肉，所以１单位土豆对应的机会成本是1/2牛肉。对应的，　Frank的情况，则是，使用１５分钟生产１单位土豆，可以用生产1/4单位的牛肉&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: left"&gt; &lt;/th&gt;
      &lt;th style="text-align: left"&gt;１单位你肉的机会成本&lt;/th&gt;
      &lt;th style="text-align: left"&gt;　１单位土豆的机会成本&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;Frank&lt;/td&gt;
      &lt;td style="text-align: left"&gt;４单位土豆&lt;/td&gt;
      &lt;td style="text-align: left"&gt;　1/4单位牛肉&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;Rose&lt;/td&gt;
      &lt;td style="text-align: left"&gt;2单位土豆&lt;/td&gt;
      &lt;td style="text-align: left"&gt;1/2单位牛肉&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;机会成本：为了得到某样东西所放弃的. 就是比较优势的计算方式所在， Frank　生产１单位牛肉所对应的机会成本是４单位的土豆，想对应的Rose则为２单位的土豆，隐含的机会成本更小，更加具有比较优势。而且生产土豆的机会成本与生产牛肉的机会成本成倒数关系。&lt;br /&gt;
  所以，无论一个人在各个方面都具有绝对优势，但是却无法在各个方面都具有比较优势。&lt;br /&gt;
  Frank使用土豆交换Rose的牛肉，假如是１单位牛肉对应３单位土豆的话,每个人都会以小于各自的机会成本获取产品。&lt;br /&gt;
  所以合作依存，交易会促进各自的生活状况。以更加高校的方式生产。当然其中隐含的条件是，能够存在一个合理的交换代价，比如上面的1/3都会低于对方的机会成本，从而促进合作，但是什么条件下会以1/3的代价进行交换呢？&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;结论：专业化和贸易的好处并不是基于绝对优势的，而是基于比较优势。贸易可以使社会上每个人收益，因为他使人们可以从事他们具有 &lt;strong&gt;比较优势&lt;/strong&gt; 的活动&lt;br /&gt;
　问题：比较优、贸易促使每个人的状况变得更好。但是如何促进贸易的形成呢？如何使1/3的交易达成呢？答案是需求与供给的力量，促进资源配置&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="市场如何运行"&gt;市场如何运行&lt;/h3&gt;
&lt;hr /&gt;

&lt;h4 id="供给与需求的市场力量"&gt;供给与需求的市场力量&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;如果你想知道一个事件或政策如何影响经济，应该先考虑如何影响供给和需求&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id="需求"&gt;需求&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;竞争市场，描述许多买者与卖者并且每一个人对市场价格的影响都是微乎其微的市场.市场还分为一些，垄断集团，半垄断&lt;/li&gt;
  &lt;li&gt;需求定理，其他条件不变，一种物品价格上升，对该物品的需求量减少，一个物品价格下降，对该物品的需求量增加．&lt;/li&gt;
  &lt;li&gt;影响需求曲线的因素：
    &lt;ul&gt;
      &lt;li&gt;当收入减少，如果一种物品的需求量减少，这种物品是正常物品，收入减少，需求量增加，物品为低档物品，例如收入减少，大家更愿意乘坐公交车出行&lt;/li&gt;
      &lt;li&gt;物品之间关联：一种物品价格下降引起另一种物品需求减少时，两种物品被成为替代品．而引起需求增加，称为互补品．&lt;/li&gt;
      &lt;li&gt;预期：人们不按照现状行事，而是按照预期．预期收入更多，会减少储蓄．&lt;/li&gt;
      &lt;li&gt;买者的数量：需求量&lt;/li&gt;
      &lt;li&gt;总结，　&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id="供给"&gt;供给&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;供给定理：　其他条件不变时候：一种物品价格上升，该物品供给量增加，　物品价格下降，供给量减少．&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;供给影响因素：
    &lt;ul&gt;
      &lt;li&gt;投入品价格: 企业成本,与生产该物品所用的投入品的价格&lt;/li&gt;
      &lt;li&gt;技术,技术的提高可以降低生产成本&lt;/li&gt;
      &lt;li&gt;预期，如果预期产品价格上升，厂家会提高市场供给&lt;/li&gt;
      &lt;li&gt;卖者数量&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id="均衡"&gt;均衡&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;供给曲线与需求曲线相交的点，为市场的均衡点，此时的价格为均衡价格，数量为均衡数量。均衡价格也被成为出清价格.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;供求定理：任何一种物品的价格都会自发调整，是该物品的供给与需求达到平衡.&lt;/li&gt;
  &lt;li&gt;分析均衡变动的三个步骤：
    &lt;ul&gt;
      &lt;li&gt;第一我们确定该事件是使供给曲线移动还是需求曲线移动。&lt;/li&gt;
      &lt;li&gt;确定曲线向右移动还是向左移动。&lt;/li&gt;
      &lt;li&gt;使用供求图说明这种移动将如何改变均衡价格和均衡数量。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;示例：
    &lt;ul&gt;
      &lt;li&gt;天气炎热通过改变人们对冰激凌的爱好而影响需求曲线。&lt;/li&gt;
      &lt;li&gt;天气炎热促进人们想吃更多的冰激凌，冰激凌的需求增加了，需求曲线向右移动。&lt;/li&gt;
      &lt;li&gt;新的均衡下，冰激凌的价格提高，供给增加。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id="需求的弹性"&gt;需求的弹性&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;一个物品的需求量对价格的反映很大，则是物品的需求是富有弹性的，对价格变化很小，则是缺乏弹性的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;控制因素
    &lt;ol&gt;
      &lt;li&gt;相似代替品的可获得行&lt;/li&gt;
      &lt;li&gt;必需品与奢侈品（商品属性）&lt;/li&gt;
      &lt;li&gt;市场的定义，狭义的市场还是广义的市场，狭义的市场更容易寻找到代替品。所以狭义的市场的需求弹性往往大于广义市场的需求弹性&lt;/li&gt;
      &lt;li&gt;物品的需求往往长期内更富有弹性(市场滞后吗？)，油价的上涨往往在长期内更具有影响意义。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;弹性计算：　需求弹性　＝　需求量变动百分比 / 价格变动百分比&lt;/li&gt;
  &lt;li&gt;规律：　
    &lt;ol&gt;
      &lt;li&gt;当需求缺乏弹性，价格和总收益，同方向变化，价格上升，总收益增加。&lt;/li&gt;
      &lt;li&gt;当需求富有弹性，价格和总收益，反方向变化，价格上升，总收益减少。&lt;/li&gt;
      &lt;li&gt;如果需求是单位弹性的,(等于１), 当价格变动时，总收益不变。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;####　供给弹性&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;如果供给量对价格的反映很大，则物品的供给是富有弹性的，对价格变化很小，则是缺乏弹性的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;控制因素:
    &lt;ul&gt;
      &lt;li&gt;卖者改变他们所生产的物品的灵活性。&lt;/li&gt;
      &lt;li&gt;供给在长期中的弹性通常大于短期。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;弹性计算：　供给需求　＝　供给量变动百分比 / 价格变动百分比&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id="案例"&gt;案例&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;农业的好消息可能对农民来说是个坏消息吗？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;假设有研究技术能够大量的提高农作物的产量，  想象一下这对农民是好是坏呢？&lt;br /&gt;
  分析：由于新的技术提高了生产产量，所以农民可以在现有的价格下提高更多的食物产量。供给曲线向右移动，价格下降，因为食物是缺乏弹性的，总收益随着产品的价格同步移动，所以总收益下降。农民得到更少的钱，这里中分析，基本排除供给弹性，因为供给基本没有弹性，只有长期中供给才富有弹性。&lt;br /&gt;
  真是的情况是：&lt;br /&gt;
      上面的分析，解释了过去一个世纪以来的美国经济的一个巨大变化，两百多年前，大部分美国人居住在农村，对农业生产的了解是相当原始的。以至于我们大多数人不得不从事农业，以生产足够的食物来养活全国的人口。但随着时间的推移，农业的技术进步增加了每个农民所能生产的食物量，由于食物的需求缺乏弹性，这种食物的供给增加导致了农业收益的减少，进而鼓励人们更多的离开农业。促进了城镇化。&lt;/p&gt;

&lt;h3 id="供给需求与政府政策"&gt;供给、需求与政府政策&lt;/h3&gt;
&lt;hr /&gt;

&lt;h4 id="价格控制价格上限价格下限"&gt;价格控制（价格上限、价格下限）&lt;/h4&gt;

&lt;p&gt;价格上限造成了稀缺物品。造成了无效率的分配。&lt;br /&gt;
住房的租金控制，同样的造成了短缺。造成了供给的稀缺，需求的增加。但是可以通过相关法律保障，住房者的相关权益，给供给端正面反馈等。&lt;/p&gt;

&lt;p&gt;关于控制价格：实际上决策者进行价格控制是因为他们认为市场是不公平的。价格控制往往是想帮助穷人。例如租金控制法的目的是使每一个人住的其房子，但是价格控制往往损害了那些想要帮助的人，最低工资法会增加一些工人的收入，但是也使其他工人成为失业者。可以使用除价格控制之外的方法来帮助需要帮助的人，例如，政府可以通过给贫困用户补助住房基金来提高他们的生活质量，这种措施并没有减少住房的供给量。&lt;/p&gt;

&lt;h4 id="税收"&gt;税收&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;无论是想卖者征收税收还是向买者征收，都是同样的效果。１：抑制了市场活动２:买家卖家共同承担税收的费用。&lt;/li&gt;
  &lt;li&gt;税收归宿：&lt;strong&gt;税收负担更多的落在缺乏弹性的市场一方身上&lt;/strong&gt;。在本质上，弹性衡量在条件变得不利时候，卖者或者买者离开市场的意愿。需求弹性小意味着没有更多的代替品，供给弹性小，意味着卖者对生产某种商品没有适当的代替品，适当代替品较少的一方更不愿意离开市场，从而负担更多的税收。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id="市场和福利"&gt;市场和福利&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;支付意愿：一个买者愿意支付的最大价格&lt;/li&gt;
  &lt;li&gt;消费者剩余: Jhon 花费80买了心里价格１００的东西，产生了２０的消费者剩余。&lt;/li&gt;
  &lt;li&gt;生产者剩余：买价减去生产成本&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;结论：供给曲线、需求曲线的交叉点，为市场消费剩余的最大点。&lt;br /&gt;
   税收收入减少了，无所谓的市场福利，造成了无谓损失。并扭曲的市场结果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id="国际贸易"&gt;国际贸易&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;更有效率的分配物品，每个国家更嫩专注于生产比较成本低的产品&lt;/li&gt;
  &lt;li&gt;增加了物品的多样性&lt;/li&gt;
  &lt;li&gt;通过规模经济降低了生产成本&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;增加了竞争&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;工作岗位论&lt;/li&gt;
  &lt;li&gt;国家安全论&lt;/li&gt;
  &lt;li&gt;幼稚产业论&lt;/li&gt;
  &lt;li&gt;不公平竞争论&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
</feed>
