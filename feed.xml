<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识总结</title>
  <subtitle>日常知识总结</subtitle>
  <id>https://geniousbar.github.io</id>
  <link href="https://geniousbar.github.io"/>
  <link href="https://geniousbar.github.io/feed.xml" rel="self"/>
  <updated>2017-04-25T08:00:00+08:00</updated>
  <author>
    <name>geniousbar</name>
  </author>
  <entry>
    <title>Rails ActiveModel</title>
    <link rel="alternate" href="https://geniousbar.github.io/2017/04/25/rails-activemodel/"/>
    <id>https://geniousbar.github.io/2017/04/25/rails-activemodel/</id>
    <published>2017-04-25T08:00:00+08:00</published>
    <updated>2017-04-25T18:32:37+08:00</updated>
    <author>
      <name>geniousbar</name>
    </author>
    <summary type="html">rails activemodel
    module ActiveModel
      extend ActiveSupport::Autoload

      autoload :AttributeAssignment
      autoload :AttributeMethods
      autoload :BlockValidator, 'active_model/validator'
      autoload :Callbacks
      autoload :Conversion</summary>
  </entry>
  <entry>
    <title>docker 入门</title>
    <link rel="alternate" href="https://geniousbar.github.io/2017/04/25/docker-abc/"/>
    <id>https://geniousbar.github.io/2017/04/25/docker-abc/</id>
    <published>2017-04-25T08:00:00+08:00</published>
    <updated>2017-04-25T11:39:14+08:00</updated>
    <author>
      <name>geniousbar</name>
    </author>
    <summary type="html">docker

概念

image(景象), container(容器),volume（数据卷）
  
    镜像(Image)和容器(Container)的关系,就像是面向对象程序设计中 的 类 和 实例 一样,镜像是静态的定义,容器是镜像运行时的实体。容器可以被 创建、启动、停止、删除、暂停等。
    容器的实质是进程,但与直接在宿主执行的进程不同,容器进程运行于属于自己的 独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、 自己的进程空间,甚至自己的用户 ID</summary>
  </entry>
  <entry>
    <title>Rails ActivRecord源码（未完成）</title>
    <link rel="alternate" href="https://geniousbar.github.io/2017/04/20/rails-activerecord/"/>
    <id>https://geniousbar.github.io/2017/04/20/rails-activerecord/</id>
    <published>2017-04-20T08:00:00+08:00</published>
    <updated>2017-04-25T11:26:26+08:00</updated>
    <author>
      <name>geniousbar</name>
    </author>
    <summary type="html">rails activerecord 源码

数据库的连接调用过程



activercord base中的代码
  # activerecord/lib/active_record/railtie.rb
    ActiveSupport.on_load(:active_record) do
      self.configurations = Rails.application.config.database_configuration

      begin
        establish_connection

</summary>
  </entry>
  <entry>
    <title>linux维护</title>
    <link rel="alternate" href="https://geniousbar.github.io/2017/04/19/linux-maintain/"/>
    <id>https://geniousbar.github.io/2017/04/19/linux-maintain/</id>
    <published>2017-04-19T08:00:00+08:00</published>
    <updated>2017-04-25T11:31:56+08:00</updated>
    <author>
      <name>geniousbar</name>
    </author>
    <summary type="html">二台机器之间同步大文件(拷贝文件到另一台机器)

rsync -rP –rsh=ssh /file/path name@ip:/file/path

建立软连接

ln -s original/file/path soft/file/path

linux后台启动服务

nohup ruby http_server.rb 2&amp;gt;&amp;amp;1 &amp;gt;&amp;gt; log.log 2&amp;gt;&amp;amp;1 /dev/null &amp;amp;
nohup command &amp;amp;&amp;gt; /dev/null &amp;amp;

linux根据关键字得到pid号

pgrep -f</summary>
  </entry>
  <entry>
    <title>Docker</title>
    <link rel="alternate" href="https://geniousbar.github.io/2017/02/25/docker/"/>
    <id>https://geniousbar.github.io/2017/02/25/docker/</id>
    <published>2017-02-25T08:00:00+08:00</published>
    <updated>2017-04-13T18:12:29+08:00</updated>
    <author>
      <name>geniousbar</name>
    </author>
    <summary type="html">安装docker
阿里云的安装脚本
curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -
使用脚本自动安装
Docker 官方为了简化安装流程，提供了一套安装脚本，CentOS 系统上可以使用这套脚本安装：
curl -sSL https://get.docker.com/ | sh

DaoCloud 的安装脚本
curl -sSL https://get.daocloud</summary>
  </entry>
  <entry>
    <title>Postgres</title>
    <link rel="alternate" href="https://geniousbar.github.io/2017/01/13/postgres/"/>
    <id>https://geniousbar.github.io/2017/01/13/postgres/</id>
    <published>2017-01-13T08:00:00+08:00</published>
    <updated>2017-04-13T18:16:28+08:00</updated>
    <author>
      <name>geniousbar</name>
    </author>
    <summary type="html">pg创建只读用户
SELECT date_trunc('minute', dd) :: TIMESTAMP
FROM generate_series('2016-10-01' :: TIMESTAMP, '2016-12-31' :: TIMESTAMP, '10 minute' :: INTERVAL) dd;

CREATE USER read_from_pg WITH ENCRYPTED PASSWORD '...';
GRANT CONNECT ON DATABASE test to read_from_pg</summary>
  </entry>
</feed>
