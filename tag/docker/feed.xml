<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识总结: docker</title>
  <subtitle>Posts tagged with docker</subtitle>
  <id>https://geniousbar.github.io</id>
  <link href="https://geniousbar.github.io"/>
  <link href="https://geniousbar.github.io/tag/docker/feed.xml" rel="self"/>
  <updated>2017-04-25T08:00:00+08:00</updated>
  <author>
    <name>geniousbar</name>
  </author>
  <entry>
    <title>docker 入门</title>
    <link rel="alternate" href="https://geniousbar.github.io/2017/04/25/docker-abc/"/>
    <id>https://geniousbar.github.io/2017/04/25/docker-abc/</id>
    <published>2017-04-25T08:00:00+08:00</published>
    <updated>2017-04-25T11:39:14+08:00</updated>
    <author>
      <name>geniousbar</name>
    </author>
    <summary type="html">docker

概念

image(景象), container(容器),volume（数据卷）
  
    镜像(Image)和容器(Container)的关系,就像是面向对象程序设计中 的 类 和 实例 一样,镜像是静态的定义,容器是镜像运行时的实体。容器可以被 创建、启动、停止、删除、暂停等。
    容器的实质是进程,但与直接在宿主执行的进程不同,容器进程运行于属于自己的 独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、 自己的进程空间,甚至自己的用户 ID</summary>
  </entry>
</feed>
